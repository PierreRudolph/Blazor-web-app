@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<input type="checkbox" @bind="DisplayEmail"> <label>Display Email</label>

@if(DisplayContacts)
{
@if (Contacts is null)
{
    @NullContacts
}
else if (Contacts.Count == 0)
{
    @EmptyContacts

}
else
{
    @foreach (var contact in Contacts)
    {
        <ContactComponent DeleteCurrentContact="DeleteContact" DisplayEmail="DisplayEmail" CurrentContact="contact">
        </ContactComponent>
    }
}
}


@code {
    [Parameter]
    public RenderFragment NullContacts { get; set; }

    [Parameter]
    public RenderFragment EmptyContacts { get; set; }

    [Parameter]
    public List<Contact> Contacts { get; set; }


    public bool DisplayEmail = false;
private bool DisplayContacts=true;


    private async Task DeleteContact(Contact contact)//so schreibt man eine asynchrone methode in C#
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", $"Do your realy want to Delete {contact.FirstName} {contact.LastName}, from the Contact list?");//$"some text{variable}"mit der syntax lÃ¤sst sich eine variable in einen string einbetten
        if (!result)//bedeutet if(result==false)
            return;
        Contacts.Remove(contact);
    }

    public void ShowContacts()=>DisplayContacts=true;
    public void HideContacts()=>DisplayContacts=false;
}
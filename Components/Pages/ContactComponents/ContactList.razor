@inject IJSRuntime jsRuntime
@using Blazor_App.Components.Layout

<input type="checkbox" @bind="DisplayEmail"> <label>Display Email</label>

@if (DisplayContacts)
{
    @if (Contacts is null)
    {
        @NullContacts
    }
    else if (Contacts.Count == 0)
    {
        @EmptyContacts

    }
    else
    {
        @foreach (var contact in Contacts)
        {
            <ContactComponent DeleteCurrentContact="RequestPermission" DisplayEmail="DisplayEmail" CurrentContact="contact">
            </ContactComponent>
        }
    }
}

<RadzenDataGrid ColumnWidth="300px" PagerHorizontalAlign="HorizontalAlign.Left" AllowPaging="true" PageSize="1"
    AllowColumnResize="true" Data="@Contacts">
    <RadzenDataGridColumn Property="FirstName" Title="First Name" Frozen="true" Width="160px" />
</RadzenDataGrid>

<DeleteConfirmation @ref="deleteConfirmation" OnConfirmed="OnDeleteConfirmed"></DeleteConfirmation>

@code {
    private DeleteConfirmation? deleteConfirmation;
    [Parameter]
    public RenderFragment? NullContacts { get; set; }

    [Parameter]
    public RenderFragment? EmptyContacts { get; set; }

    [Parameter]
    public List<Contact>? Contacts { get; set; }


    public bool DisplayEmail = false;
    private bool DisplayContacts = true;


    private Task RequestPermission(Contact contact)//so schreibt man eine asynchrone methode in C#
    {
        @* var result = await jsRuntime.InvokeAsync<bool>("confirm", $"Do your realy want to Delete {contact.FirstName}
{contact.LastName}, from the Contact list?");//$"some text{variable}"mit der syntax lÃ¤sst sich eine variable in einen
string einbetten
if (!result)//bedeutet if(result==false)
return;
Contacts.Remove(contact); *@
        if (deleteConfirmation != null)
        {
            deleteConfirmation.ContactName = $"{contact.FirstName} {contact.LastName}";
            deleteConfirmation.ContactToDelete = contact;
            deleteConfirmation.Show();
        }


        return Task.CompletedTask;
    }

    private Task OnDeleteConfirmed(Contact contact)
    {
        if (Contacts != null)
        {
            Contacts.Remove(contact);
        }
        if (deleteConfirmation != null)
        {
            deleteConfirmation.Hide();
        }
        return Task.CompletedTask;
    }

    public void ShowContacts() => DisplayContacts = true;
    public void HideContacts() => DisplayContacts = false;
}
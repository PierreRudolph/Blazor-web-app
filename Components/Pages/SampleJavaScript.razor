@page "/Sample-JavaScript"
@inject IJSRuntime jsRuntime
@*IJSRuntime ist eine default dependencie in Blazor
und muss deswegen nicht erst in Program.cs als service
eingebunden werden*@
<h1>Sample JavaScript</h1>



<button @onclick="ShowAlert">Alert</button>
<button @onclick="ShowConfirm">Display Confirm</button>
<br>
<span>Result from Confirm is: @confirmResult</span>
<br>
<button @onclick="CallInvokeMethodJavaScript">Call Instance Method JavaScript</button>
@code {
    private string confirmResult = "";
    private void ShowAlert()
    {
        //alert("some message")
        jsRuntime.InvokeVoidAsync("alert", "Hello world from a C# Method");
    }

    private async Task ShowConfirm()
    {
        var result = await jsRuntime.InvokeAsync<bool>("confirm", "Do you need to proceed?");
        confirmResult = result.ToString();
    }

    private async Task CallInvokeMethodJavaScript()
    {
        var sampleJsReference = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/sample.js");//hier wird die
                                                                                                            //javascript datei heruntergeladen nur wenn die funktion aufgerufen wird.
        await sampleJsReference.InvokeVoidAsync("callInstanceMethod", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task<string> GetValueFromInstance()//so kann man javascript code von eine class instance aus aufrufen
    {
        return "Hello World from Instance";
    }

}